# -*- coding: utf-8 -*-
"""Client and server classes corresponding to protobuf-defined services."""
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
# source: test_stub.proto
# python -m grpc_tools.protoc -I. test_stub.proto --python_out=. --grpc_python_out=.
#
#    Copyright (C) 2021 Cotopaxi Contributors. All Rights Reserved.
#       Author: Jakub Botwicz
#
#    This file is part of Cotopaxi.
#
#    Cotopaxi is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    Cotopaxi is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Cotopaxi.  If not, see <http://www.gnu.org/licenses/>.
#

import grpc

import cotopaxi.grpc_test_stub_pb2 as test__stub__pb2

# pylint: disable=no-self-use, too-few-public-methods, too-many-arguments, unused-argument
class PingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Construct.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
            "/Test_Stub.Ping_Service/Ping",
            request_serializer=test__stub__pb2.PingRequest.SerializeToString,
            response_deserializer=test__stub__pb2.PingResponse.FromString,
        )


class PingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ping_serviceservicer_to_server(servicer, server):
    """Add PingService to servicer."""
    rpc_method_handlers = {
        "Ping": grpc.unary_unary_rpc_method_handler(
            servicer.ping,
            request_deserializer=test__stub__pb2.PingRequest.FromString,
            response_serializer=test__stub__pb2.PingResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "Test_Stub.Ping_Service", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class PingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        """Send Ping message."""
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Test_Stub.Ping_Service/Ping",
            test__stub__pb2.PingRequest.SerializeToString,
            test__stub__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
