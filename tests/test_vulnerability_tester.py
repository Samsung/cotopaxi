# -*- coding: utf-8 -*-
"""Unit tests for vulnerability_tester."""
#
#    Copyright (C) 2021 Cotopaxi Contributors. All Rights Reserved.
#    Copyright (C) 2020 Samsung Electronics. All Rights Reserved.
#       Authors: Jakub Botwicz
#
#    This file is part of Cotopaxi.
#
#    Cotopaxi is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    Cotopaxi is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Cotopaxi.  If not, see <http://www.gnu.org/licenses/>.
#

import timeout_decorator
import unittest

from cotopaxi.common_utils import get_local_ip
from cotopaxi.cotopaxi_tester import check_caps
from cotopaxi.vulnerability_tester import main, load_vulnerabilities, VULN_DB_YAML
from .common_test_utils import scrap_output, load_test_servers, CotopaxiToolServerTester
from .common_runner import TimerTestRunner


class TestVulnerabilityTester(CotopaxiToolServerTester, unittest.TestCase):
    def __init__(self, *args, **kwargs):
        CotopaxiToolServerTester.__init__(self, *args, **kwargs)
        unittest.TestCase.__init__(self, *args, **kwargs)
        self.main = main

    def vulnerability_tester(self, server_name, server_ver, vuln_name):
        test_server_ip = str(self.config["COMMON"]["DEFAULT_IP"])
        if (
            "DTLS_TEST_SERVERS" not in self.config
            or not self.config["DTLS_TEST_SERVERS"]
        ):
            print("No remote servers in test_config.ini - remote tests not performed!")
            return None
        test_server_port = next(
            x
            for x in self.test_servers
            if x["name"] == server_name and x["version"] == server_ver
        )["port"]

        # print ([test_server_ip, str(test_server_port), "--vuln", vuln_name, "-HD"])
        output = scrap_output(
            main, [test_server_ip, str(test_server_port), "--vuln", vuln_name, "-HD"]
        )
        # print(output)
        print("Tested: {} on {} {}".format(vuln_name, server_name, server_ver))
        return output

    def vulnerability_tester_positive(self, server_name, server_ver, vuln_name):
        output = self.vulnerability_tester(server_name, server_ver, vuln_name)
        if not output:
            return
        self.assertIn("Total number of vulnerable endpoints: 1", output)
        self.assertIn("vuln: " + vuln_name, output)

    def vulnerability_tester_negative(self, server_name, server_ver, vuln_name):
        output = self.vulnerability_tester(server_name, server_ver, vuln_name)
        if not output:
            return
        self.assertIn("Total number of vulnerable endpoints: 0", output)
        self.assertIn(vuln_name, output)

    @timeout_decorator.timeout(5)
    def test_vuln_tester_tinydtls_pos(self):
        #  self.vulnerability_tester("tinydtls", "0.8.2", "TINYDTLS_000")
        self.vulnerability_tester_positive("tinydtls", "0.9 (devel)", "TINYDTLS_001")

    @timeout_decorator.timeout(20)
    def test_vuln_tester_information_neg(self):
        self.vulnerability_tester_negative("GstRtspServer", "2019-12-01", "TP-LINK_000")

    # @timeout_decorator.timeout(5)
    #  def test_vuln_tester_madmaze(self):

    # self.vulnerability_tester("madmaze_htcpcp", "2011-08-03", "MADMAZE-HTCPCP_000")
    # pass


class TestVulnerabilityTesterOld(unittest.TestCase):
    @timeout_decorator.timeout(5)
    def test_main_empty_neg(self):
        output = scrap_output(main, [])
        self.assertTrue(
            "error: too few arguments" in output
            or "error: the following arguments are required" in output
        )

    @timeout_decorator.timeout(5)
    def test_main_too_few_args_neg(self):
        output = scrap_output(main, ["10"])
        self.assertTrue(
            "error: too few arguments" in output
            or "error: the following arguments are required" in output
        )

    @timeout_decorator.timeout(5)
    def test_main_list_pos(self):
        output = scrap_output(main, ["-L"])
        self.assertIn("Number of vulnerabilities in database", output)
        self.assertIn("See more at", output)
        output = scrap_output(main, ["--list"])
        self.assertIn("Number of vulnerabilities in database", output)

    @timeout_decorator.timeout(5)
    def test_main_ping_failed_neg(self):
        output = scrap_output(
            main,
            [
                "127.0.0.1",
                "10",
                "-V",
                "-T",
                "0.001",
                "-P",
                "MQTT",
                "--cve",
                "CVE-2018-12679",
                "CVE-2017-7243",
                "CVE-2017-12130",
                "CVE-2018-19417",
            ],
        )
        self.assertIn("--ignore-ping-check", output)
        self.assertIn("stopped", output)
        self.assertIn("Make sure you have permission", output)

    @timeout_decorator.timeout(5)
    def test_main_merge_cve_pos(self):
        output = scrap_output(
            main, ["127.0.0.1", "10", "-V", "-HD", "--cve", "CVE-2019-9749"]
        )
        self.assertIn("merged selected vulns by name: ['FLUENTBIT_000']", output)

    @timeout_decorator.timeout(5)
    def test_main_cve_neg(self):
        output = scrap_output(main, ["127.0.0.1", "10", "-V", "-HD", "--cve"])
        self.assertIn("expected at least one argument", output)

    @timeout_decorator.timeout(5)
    def test_main_merge_vuln_pos(self):
        output = scrap_output(
            main, ["127.0.0.1", "10", "-V", "-HD", "--vuln", "FLUENTBIT_000"]
        )
        self.assertIn("merged selected vulns by name: ['FLUENTBIT_000']", output)

    @timeout_decorator.timeout(5)
    def test_main_vuln_neg(self):
        output = scrap_output(main, ["127.0.0.1", "10", "-V", "-HD", "--vuln"])
        self.assertIn("expected at least one argument", output)

    @timeout_decorator.timeout(5)
    def test_main_merge_both_pos(self):
        output = scrap_output(
            main,
            [
                "127.0.0.1",
                "10",
                "-V",
                "-HD",
                "--cve",
                "CVE-2019-9749",
                "--vuln",
                "FLUENTBIT_000",
            ],
        )
        self.assertIn("merged selected vulns by name: ['FLUENTBIT_000']", output)

    @timeout_decorator.timeout(5)
    def test_main_merge_both_neg(self):
        output = scrap_output(
            main, ["127.0.0.1", "10", "-V", "-HD", "--cve", "--vuln", "-D"]
        )
        self.assertIn("expected at least one argument", output)

    @timeout_decorator.timeout(5)
    def test_main_ping_failed_ipv6_neg(self):
        output = scrap_output(
            main,
            [
                "::1",
                "10",
                "-V",
                "-T",
                "0.001",
                "-HD",
                "-P",
                "CoAP",
                "--cve",
                "CVE-2018-12679",
            ],
        )
        self.assertIn("--ignore-ping-check", output)
        self.assertIn("stopped", output)

    @timeout_decorator.timeout(5)
    def test_main_basic_params_pos(self):
        output = scrap_output(
            main,
            [
                "127.0.0.1",
                "10",
                "-V",
                "-T",
                "0.001",
                "-HD",
                "--ignore-ping-check",
                "--cve",
                "CVE-2018-12679",
            ],
        )
        self.assertIn(
            "was not responding to ping before sending payload, so you"
            " need to check result of test directly on tested device",
            output,
        )
        self.assertIn("Payload for", output)
        self.assertIn("CVE-2018-12679", output)

    @timeout_decorator.timeout(5)
    def test_vulnerability_files_pos(self):
        vulnerabilities = load_vulnerabilities(VULN_DB_YAML)
        for vuln_name in vulnerabilities:
            payload_file = vulnerabilities[vuln_name].payload_file
            with open("cotopaxi/vulnerabilities/" + payload_file, "rb") as file_handle:
                test_payload = file_handle.read()
                self.assertTrue(len(test_payload) > 0)

    @timeout_decorator.timeout(5)
    def test_vuln_tester_pos(self):
        local_ip = get_local_ip()
        print("ip: {}".format(local_ip))

        config = load_test_servers()
        if "MQTT_TEST_SERVERS" not in config or not config["MQTT_TEST_SERVERS"]:
            print("No remote MQTT servers - remote tests not performed!")
            return
        test_server_ip = config["COMMON"]["DEFAULT_IP"]
        mqtt_servers = ["FLUENTBIT"]
        for mqtt_server in mqtt_servers:
            port = config["MQTT_TEST_SERVERS"][mqtt_server + "_port"]
            print("test_server_ip: {} port: {}".format(test_server_ip, port))
            output = scrap_output(main, [test_server_ip, port, "-P", "MQTT", "-HD"])
            self.assertIn("Total number of vulnerable endpoints: 1", output)
            self.assertIn("vuln: FLUENTBIT_000'", output)

    @timeout_decorator.timeout(5)
    def test_vuln_tester_neg(self):
        local_ip = get_local_ip()
        print("ip: {}".format(local_ip))

        config = load_test_servers()
        if "CoAP_TEST_SERVERS" not in config or not config["CoAP_TEST_SERVERS"]:
            print("No remote CoAP servers - remote tests not performed!")
            return
        test_server_ip = config["COMMON"]["DEFAULT_IP"]
        coap_servers = ["aiocoap"]
        for coap_server in coap_servers:
            port = config["CoAP_TEST_SERVERS"][coap_server + "_port"]
            print("test_server_ip: {} port: {}".format(test_server_ip, port))
            output = scrap_output(
                main,
                [test_server_ip, port, "-P", "CoAP", "-HD", "--vuln", "COAPTHON3_000"],
            )
            self.assertIn(" is NOT vulnerable to ", output)


if __name__ == "__main__":
    TEST_RUNNER = TimerTestRunner()
    unittest.main(testRunner=TEST_RUNNER)
